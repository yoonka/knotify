name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  build-linux:
    name: Build Linux
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            artifact_name: knotify-linux-x86_64
          - target: x86_64-unknown-linux-musl
            artifact_name: knotify-linux-x86_64-musl
          - target: aarch64-unknown-linux-gnu
            artifact_name: knotify-linux-aarch64
          - target: aarch64-unknown-linux-musl
            artifact_name: knotify-linux-aarch64-musl
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build
        run: cross build --release --target ${{ matrix.target }}

      - name: Prepare binary
        run: |
          cd target/${{ matrix.target }}/release
          strip knotify || true
          tar czf ${{ matrix.artifact_name }}.tar.gz knotify
          mv ${{ matrix.artifact_name }}.tar.gz ${{ github.workspace }}/

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}.tar.gz
          asset_name: ${{ matrix.artifact_name }}.tar.gz
          asset_content_type: application/gzip

  build-macos:
    name: Build macOS
    needs: create-release
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            artifact_name: knotify-macos-x86_64
          - target: aarch64-apple-darwin
            artifact_name: knotify-macos-aarch64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        run: |
          cd target/${{ matrix.target }}/release
          strip knotify
          tar czf ${{ matrix.artifact_name }}.tar.gz knotify
          mv ${{ matrix.artifact_name }}.tar.gz ${{ github.workspace }}/

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}.tar.gz
          asset_name: ${{ matrix.artifact_name }}.tar.gz
          asset_content_type: application/gzip

  build-windows:
    name: Build Windows
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            artifact_name: knotify-windows-x86_64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build
        run: cross build --release --target ${{ matrix.target }}

      - name: Prepare binary
        run: |
          cd target/${{ matrix.target }}/release
          zip -j ${{ matrix.artifact_name }}.zip knotify.exe
          mv ${{ matrix.artifact_name }}.zip ${{ github.workspace }}/

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}.zip
          asset_name: ${{ matrix.artifact_name }}.zip
          asset_content_type: application/zip

  build-freebsd:
    name: Build FreeBSD
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-freebsd
            artifact_name: knotify-freebsd-x86_64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build
        run: cross build --release --target ${{ matrix.target }}

      - name: Prepare binary
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ${{ matrix.artifact_name }}.tar.gz knotify
          mv ${{ matrix.artifact_name }}.tar.gz ${{ github.workspace }}/

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}.tar.gz
          asset_name: ${{ matrix.artifact_name }}.tar.gz
          asset_content_type: application/gzip

  checksums:
    name: Generate Checksums
    needs: [create-release, build-linux, build-macos, build-windows, build-freebsd]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Generate checksums
        run: |
          cd artifacts
          find . -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec sha256sum {} \; > SHA256SUMS
          cat SHA256SUMS

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./artifacts/SHA256SUMS
          asset_name: SHA256SUMS
          asset_content_type: text/plain
